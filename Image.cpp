#include "stdafx.h"
#include "Image.h"

/********************************************************************************
## Image ##
@@ ID2D1Bitmap* bitmap : ImageManager에서 생성된 비트맵
@@ TagLoadImageInfo loadinfo : 이미지 정보(키값,파일 경로)

프레임이미지가 아닌 이미지 클래스 생성
*********************************************************************************/
Image::Image(ID2D1Bitmap * const bitmap, const TagLoadedImageInfo & loadinfo, float alpha, float angle)
	: mBitmap(bitmap), mLoadInfo(loadinfo), mScale(1.f), mMaxFrameX(1), mMaxFrameY(1)
{
	this->mSize.x = (float)this->mBitmap->GetPixelSize().width;
	this->mSize.y = (float)this->mBitmap->GetPixelSize().height;

	mAlpha = alpha;
	mAngle = angle;

	FrameRect rc;
	rc.x = 0;
	rc.y = 0;
	rc.width = mSize.x;
	rc.height = mSize.y;
	this->mFrameInfo.push_back(rc);

}
/********************************************************************************
## Image ##
@@ ID2D1Bitmap* bitmap : ImageManager에서 생성된 비트맵
@@ TagLoadImageInfo loadinfo : 이미지 정보(키값,파일 경로)
@@ int maxFrameX : 가로 프레임 수
@@ int maxFrameY : 세로 프레임 수

프레임 이미지 클래스 생성
*********************************************************************************/
Image::Image(ID2D1Bitmap * bitmap, const TagLoadedImageInfo & loadinfo, const int & maxFrameX, const int & maxFrameY, float alpha, float angle)
	: mBitmap(bitmap), mLoadInfo(loadinfo), mMaxFrameX(maxFrameX), mMaxFrameY(maxFrameY), mScale(1.f)
{
	this->mSize.x = (float)mBitmap->GetPixelSize().width;
	this->mSize.y = (float)mBitmap->GetPixelSize().height;

	float frameX = mSize.x / this->mMaxFrameX;
	float frameY = mSize.y / this->mMaxFrameY;

	mAlpha = alpha;
	mAngle = angle;

	FrameRect rc;
	for (int j = 0; j < maxFrameY; ++j)
	{
		for (int i = 0; i < maxFrameX; ++i)
		{
			rc.x = i * (frameX);
			rc.y = j * (frameY);
			rc.width = frameX;
			rc.height = frameY;
			this->mFrameInfo.push_back(rc);
		}
	}
}
/********************************************************************************
## ~Image ##
비트맵 해제
*********************************************************************************/
Image::~Image()
{
	SAFE_RELEASE(mBitmap);
}
/********************************************************************************
## Render ##
@@ int x : 그릴 좌표
@@ int y : 그릴 좌표
@@ Pivot::Enum pivot : 그릴 피봇
*********************************************************************************/
void Image::Render( int x,  int y, const bool& isRelative)
{
	Vector2 renderPos((float)x, (float)y);
	//그릴 사이즈 = 사이즈 * 스케일
	this->mSize.x = mSize.x * mScale;
	this->mSize.y = mSize.y * mScale;

	//크기 정보를 기반으로 scale행렬 구축 
	D2D1::Matrix3x2F scale = D2D1::Matrix3x2F::Scale(mScale, mScale);
	Vector2 offset(0, 0);

	if (isRelative)
	{
		renderPos = CAMERA->CorrecteLocation(&renderPos);
	}			   

	//angle정보를 기준으로 회전 행렬 구축 
	D2D1::Matrix3x2F rotation = D2D1::Matrix3x2F::Rotation(mAngle, Vector2(renderPos/2).TypeTransPoint2F());
	//렌더링 영역 생성 
	D2D1_RECT_F dxArea = D2D1::RectF(renderPos.x, renderPos.y, renderPos.x + mSize.x, renderPos.y + mSize.y);
	//이미지가 화면에 그려질 최종 행렬은 크기행렬 * 회전행렬 * 이동행렬 
	//행렬은 교환법칙이 성립이 안되므로 반드시 위의 순서를 맞춰서 진행해 주어야 한다. 
	D2DRENDER->GetRenderTarget()->SetTransform(scale * rotation);
	//렌더링 요청
	D2DRENDER->GetRenderTarget()->DrawBitmap(mBitmap, dxArea, mAlpha);
	//렌더링이 끝났다면 옵션값 기본으로 세팅
	this->ResetRenderOption();
}

void Image::Render(Vector2 pos, const bool & isRelative)
{
	//그릴 사이즈 = 사이즈 * 스케일
	this->mSize.x = mSize.x * mScale;
	this->mSize.y = mSize.y * mScale;

	//크기 정보를 기반으로 scale행렬 구축 
	D2D1::Matrix3x2F scale = D2D1::Matrix3x2F::Scale(mScale, mScale);

	Vector2 temp = pos;
	if (isRelative)
	{
		temp = CAMERA->CorrecteLocation(&temp);
	}

	// 이미지가 화면 밖이면 그리지ㅣ 않는다.
	if (temp.x > WINSIZE_X || temp.y > WINSIZE_Y || temp.x + mSize.x < 0 || temp.y + mSize.y < 0)
	{
		ResetRenderOption();
		return;
	}

	//angle정보를 기준으로 회전 행렬 구축 
	D2D1::Matrix3x2F rotation = D2D1::Matrix3x2F::Rotation(mAngle, Vector2(temp / 2).TypeTransPoint2F());
	//렌더링 영역 생성 
	D2D1_RECT_F dxArea = D2D1::RectF(temp.x, temp.y, temp.x + mSize.x,temp.y + mSize.y);

	//이미지가 화면에 그려질 최종 행렬은 크기행렬 * 회전행렬 * 이동행렬 
	//행렬은 교환법칙이 성립이 안되므로 반드시 위의 순서를 맞춰서 진행해 주어야 한다. 
	D2DRENDER->GetRenderTarget()->SetTransform(scale * rotation);
	//렌더링 요청
	D2DRENDER->GetRenderTarget()->DrawBitmap(mBitmap, dxArea, mAlpha);
	//렌더링이 끝났다면 옵션값 기본으로 세팅
	this->ResetRenderOption();
}

void Image::Render(Vector2 pos, Vector2 index, const bool & isRelative)
{
	//프레임이 최대 프레임을 벗어났다면 그리지 않는다. 
	if (index.x >= this->mMaxFrameX || index.y >= this->mMaxFrameY)
	{
		ResetRenderOption();
		return;
	}
	//현재 프레임인덱스 
	int frame = static_cast<int>(index.y * mMaxFrameX + index.x);

	//크기 행렬 구축 
	D2D1::Matrix3x2F scale = D2D1::Matrix3x2F::Scale(mScale, mScale);

	if (isRelative)
	{
		pos = CAMERA->CorrecteLocation(&pos);
	}

	// 이미지가 화면 밖이면 그리지ㅣ 않는다.
	if (pos.x > WINSIZE_X || pos.y > WINSIZE_Y || pos.x + mSize.x < 0 || pos.y + mSize.y < 0)
	{
		ResetRenderOption();
		return;
	}

	//angle정보를 기준으로 회전 행렬 구축 
	D2D1::Matrix3x2F rotation = D2D1::Matrix3x2F::Rotation(mAngle, Vector2(pos / 2).TypeTransPoint2F());

	//그릴 영역 세팅 
	D2D1_RECT_F dxArea = D2D1::RectF(pos.x, pos.y, pos.x + mSize.x, pos.y + mSize.y);
	D2D1_RECT_F dxSrc = D2D1::RectF(mFrameInfo[frame].x, mFrameInfo[frame].y,
		(mFrameInfo[frame].x + mFrameInfo[frame].width),
		(mFrameInfo[frame].y + mFrameInfo[frame].height));

	//최종행렬 세팅
	D2DRENDER->GetRenderTarget()->SetTransform(scale * rotation);

	//렌더링 요청
	D2DRENDER->GetRenderTarget()->DrawBitmap(mBitmap, dxArea, mAlpha,
		D2D1_BITMAP_INTERPOLATION_MODE_LINEAR, &dxSrc);

	this->ResetRenderOption();
}
/********************************************************************************
## FrameRender ##
@@ int x : 그릴 좌표
@@ int y : 그릴 좌표
@@ int frameX : 가로 프레임
@@ int frameY : 세로 프레임
@@ Pivot::Enum pivot : 그릴 피봇
*********************************************************************************/
void Image::FrameRender( Vector2 pos,  Vector2 frameXY, const bool& isRelative, float alpha)
{
	//프레임이 최대 프레임을 벗어났다면 그리지 않는다. 
	if (frameXY.x >= this->mMaxFrameX || frameXY.y >= this->mMaxFrameY)
	{
		ResetRenderOption();
		return;
	}
	//현재 프레임인덱스 
	int frame = static_cast<int>(frameXY.y * mMaxFrameX + frameXY.x);


	if (isRelative)
	{
		pos = CAMERA->CorrecteLocation(&pos);
	}
	
	// 이미지가 화면 밖이면 그리지ㅣ 않는다.
	if (pos.x > WINSIZE_X || pos.y > WINSIZE_Y || pos.x + mSize.x < 0 || pos.y + mSize.y < 0)
	{
		ResetRenderOption();
		return;
	}
	if (mAngle != 0)
	{
		int a = 100;
	}
	D2D1_POINT_2F center_Pos = {pos.x, pos.y };

	//angle정보를 기준으로 회전 행렬 구축 
	D2D1::Matrix3x2F rotation = D2D1::Matrix3x2F::Rotation(mAngle, center_Pos);

	//그릴 영역 세팅 
	D2D1_RECT_F dxArea = D2D1::RectF(pos.x, pos.y, pos.x + mSize.x, pos.y + mSize.y);
	D2D1_RECT_F dxSrc = D2D1::RectF(mFrameInfo[frame].x, mFrameInfo[frame].y,
		(mFrameInfo[frame].x + mFrameInfo[frame].width),
		(mFrameInfo[frame].y + mFrameInfo[frame].height));

	//최종행렬 세팅
	D2DRENDER->GetRenderTarget()->SetTransform(rotation);

	//렌더링 요청
	D2DRENDER->GetRenderTarget()->DrawBitmap(mBitmap, dxArea, alpha,
		D2D1_BITMAP_INTERPOLATION_MODE_LINEAR, &dxSrc);

	this->ResetRenderOption();
}
/********************************************************************************
## ResetRenderOption ##
이미지 클래스 렌더 관련 옵션들 전부 초기화
*********************************************************************************/
void Image::ResetRenderOption()
{
	this->mAlpha = 1.0f;
	this->mScale = 1.0f;
	this->mSize.x = (float)mBitmap->GetPixelSize().width;
	this->mSize.y = (float)mBitmap->GetPixelSize().height;
	this->mIsReverseAxisX = this->mIsReverseAxisY = false;
	this->mAngle = 0.f;
	D2D1::Matrix3x2F rotationReset = D2D1::Matrix3x2F::Rotation(0.f);
	D2DRENDER->GetRenderTarget()->SetTransform(rotationReset);
	
}

bool CursorOnOff = true;